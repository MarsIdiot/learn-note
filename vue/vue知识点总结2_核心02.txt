******vue简单介绍******
**Vue基础篇**
八、事件处理
	1. 绑定监听:
	  v-on:xxx="fun"
	  @xxx="fun"
	  @xxx="fun(参数)"

	  默认事件形参: event
	  隐含属性对象: $event
	  示例说明:
		view:
			<button  @click="test3($event)" >hello</button>
		vm：
			test3(event){
				alert("test3"+event.target.textContent)//获取标签文本
		  }
	2. 事件修饰符:
		.prevent : 阻止事件的默认行为 event.preventDefault()
			//阻止跳转到百度而执行test事件
			<a href="http://www.baidu.com" @click.prevent="test">百度一下</a>
		.stop : 停止事件冒泡 event.stopPropagation()
			示例说明:
				//如果不加入stop,触发内嵌div会先后执行test2、test1事件
				<div style="width: 200px;height: 200px;background: red" @click="test1">
				  <div style="width: 100px;height: 100px;background: blue" @click.stop="test2"></div>
				</div>
	3. 按键修饰符
		.keycode : 操作的是某个keycode值的健
		.enter : 操作的是enter键
			<input type="text" @keyup.13="test">//按下enter键触发事件
			或<input type="text" @keyup.enter="test">
		
九.表单输入绑定
	1.使用v-model(双向数据绑定)自动收集数据
	  text/textarea
	  checkbox
	  radio
	  select
	  
	示例说明：
		view:
			<div id="demo">
			  <form @submit.prevent="submit">
				<span>性别: </span>
				<input type="radio" id="female" value="女" v-model="sex">
				<label for="female">女</label>
				<input type="radio" id="male" value="男" v-model="sex">
				<label for="male">男</label><br>
	
				<input type="checkbox" v-model="likes" value="篮球">
				<label>篮球</label>
				<input type="checkbox" v-model="likes" value="足球">
				<label>足球</label>
				<input type="checkbox" v-model="likes" value="乒乓球">
				<label>乒乓球</label>

				<select v-model="cityId">
				  <option value="">未选择</option>
				  //注意此处value书写时，为了获取到id值，需要从datas中取，则需要写成':value'
				  <option :value="city.id" v-for="(city,index) in cities" :key="index">{{city.name}}</option>
				</select>

				<input type="submit" value="提交">
			  </form>
			</div>
			
		VM书写：
			new  Vue({
			  el:'#demo',
			  data:{
				  likes:[],
				  cities:[
					  {id:1,name:'武汉'},
					  {id:2,name:'成都'},
					  {id:3,name:'重庆'},
					  {id:4,name:'云南'}
				  ],
				  cityId:''
				}
			 )}

十、Vue生命周期
	1. vue对象的生命周期
	  1). 初始化显示
		* beforeCreate()
		* created()
		* beforeMount()
		* mounted()
	  2). 更新状态
		* beforeUpdate()
		* updated()
	  3). 销毁vue实例: vm.$destory()
		* beforeDestory()
		* destoryed()
	2. 常用的生命周期方法
	  created()/mounted(): 发送ajax请求, 启动定时器等异步任务
	  beforeDestory(): 做收尾工作, 如: 清除定时器
			
十一、过渡&动画
	1. vue动画的理解
	  操作css的trasition或animation
	  vue会给目标元素添加/移除特定的class
	2. 基本过渡动画的编码
	  1). 在目标元素外包裹<transition name="xxx">
	  2). 定义class样式
		1>. 指定过渡样式: transition
		2>. 指定隐藏时的样式: opacity/其它
	3. 过渡的类名
	  xxx-enter-active: 指定显示的transition
	  xxx-leave-active: 指定隐藏的transition
	  xxx-enter: 指定隐藏时的样式			
			
十二、过滤器
	1. 理解过滤器
	  功能: 对要显示的数据进行特定格式化后再显示
	  注意: 并没有改变原本的数据, 可是产生新的对应的数据
	2. 编码
	  1). 定义过滤器
		Vue.filter(filterName, function(value[,arg1,arg2,...]){
		  // 进行一定的数据处理
		  return newValue
		})
	  2). 使用过滤器
		//mydata：需要过滤的对象
		<div>{{myData | filterName}}</div>
		<div>{{myData | filterName(arg)}}</div>			
	
	示例说明：
		显示格式化的日期时间
		1）引入时间格式化库moment.js
			<script type="text/javascript" src="https://cdn.bootcss.com/moment.js/2.22.1/moment.js"></script>
		2)定义过滤器
			<script>
			// 定义过滤器
			  Vue.filter('dateString', function (value, format='YYYY-MM-DD HH:mm:ss') {
				return moment(value).format(format);
			  })

			  new Vue({
				el: '#test',
				data: {
				  time: new Date()
				}
			  )}
			<script>
		3)调用过滤器
			<p>最完整的: {{time | dateString}}</p>//输出：2018-8-21 21:03:32
			<p>年月日: {{time | dateString('YYYY-MM-DD')}}</p>//输出：2018-8-21
			
十三、指令directive
	1.常用内置指令
		v-text : 更新元素的 textContent
		v-html : 更新元素的 innerHTML
		v-if : 如果为true, 当前标签才会输出到页面
		v-else: 如果为false, 当前标签才会输出到页面
		v-show : 通过控制display样式来控制显示/隐藏
		v-for : 遍历数组/对象
		v-on : 绑定事件监听, 一般简写为@
		v-bind : 强制绑定解析表达式, 可以省略v-bind
		v-model : 双向数据绑定
		ref : 为某个元素注册一个唯一标识, vue对象通过$refs属性访问这个元素对象
			<p ref="msg">abcd</p>
			获取：this.$refs.msg.innerHTML
		v-cloak : 使用它防止闪现表达式, 与css配合: [v-cloak] { display: none }			
	
	2.自定义指令
		1). 注册全局指令
		写在Vue实例外，即被<script></script>包含
		//el：指令属性所在标签对象
		//binding:包含指令相关信息数据的对象
		  Vue.directive('my-directive', function(el, binding){
			el.innerHTML = binding.value.toupperCase()
		  })
		2). 注册局部指令
			写在Vue实例内
		  directives : {
			'my-directive' : {
				bind (el, binding) {
				  el.innerHTML = binding.value.toupperCase()
				}
			}
		  }
		3). 使用指令
		  v-my-directive='xxx'
			
十五、插件
	声明使用插件(安装插件: 调用插件的install())
	  Vue.use(MyPlugin) // 内部会调用插件对象的install()			
			
			
			
			
			
			
			
			
			